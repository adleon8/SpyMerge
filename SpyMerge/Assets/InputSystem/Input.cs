//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/InputSystem/Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Input: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Input()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input"",
    ""maps"": [
        {
            ""name"": ""PlayerInput"",
            ""id"": ""ecaafa64-d397-4aef-a544-f704e4adfea6"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""af572db3-df1c-4707-85a4-64060ac6b469"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Spin"",
                    ""type"": ""Button"",
                    ""id"": ""0d99d86a-76d9-47c1-af40-5689590e882c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PickUpRock"",
                    ""type"": ""Button"",
                    ""id"": ""ad771866-8a9e-455b-902e-32856fc97704"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crawl"",
                    ""type"": ""Button"",
                    ""id"": ""ff73a852-dbe8-47ea-b540-892d6fe938de"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Speed"",
                    ""type"": ""Button"",
                    ""id"": ""9404e6c4-12fc-4865-83e2-b854a6cfde2c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseItem1"",
                    ""type"": ""Button"",
                    ""id"": ""273919ad-b669-4839-b7f6-e0ecec850994"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseItem2"",
                    ""type"": ""Button"",
                    ""id"": ""9e27d47b-b389-4b3b-b467-0ce2b071c23d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleInventory"",
                    ""type"": ""Button"",
                    ""id"": ""3ba2aa45-af39-4c3b-9ce3-32de5721f9d0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TogglePauseMenu"",
                    ""type"": ""Button"",
                    ""id"": ""bd1ed9b0-b73b-4ff0-982d-7f50621c9983"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseItem"",
                    ""type"": ""Button"",
                    ""id"": ""59c4ede4-4409-41e5-8282-d4213917c955"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DeselectItem"",
                    ""type"": ""Button"",
                    ""id"": ""c0eabb3d-383f-42ee-ac5a-0081b2e24f70"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""9f30e829-3917-41e0-8e19-cfdd944fc26d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""80d0b3c1-a952-447d-83f0-ffd4953437d1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""460f3a83-5c63-42b7-86ab-66e826c7ef77"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1b752e1d-e149-41dc-b70a-f9b03b60ef13"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2b88724c-23ab-44bd-ac58-4e4b2373a37f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9dfd738e-2fcf-418d-9bd3-528d278d3d22"",
                    ""path"": ""<Mouse>/forwardButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Spin"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f0793fe7-f3e6-4669-9245-7404a77377a6"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Spin"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""36f7b23e-4919-4c71-a0fa-d759ca4afa7f"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PickUpRock"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""61eae19b-a48f-45c8-8136-c2433604766e"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crawl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""55bebf21-c5ed-4130-9dea-c1ba46819ea2"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Speed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""46118ec2-c750-4223-bc05-427f5a9a2896"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseItem1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7f306302-4713-4517-b770-476934f4f29b"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseItem2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6bd39a27-894d-4be5-b668-2e75e56fbc59"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""82b99615-3f01-44b5-84db-df08c7564ce2"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TogglePauseMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""292ffed0-d522-4cad-9686-7e2a15fa0631"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""683d630a-1e3a-4f56-a64e-c99a0ff6cabc"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DeselectItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerInput
        m_PlayerInput = asset.FindActionMap("PlayerInput", throwIfNotFound: true);
        m_PlayerInput_Move = m_PlayerInput.FindAction("Move", throwIfNotFound: true);
        m_PlayerInput_Spin = m_PlayerInput.FindAction("Spin", throwIfNotFound: true);
        m_PlayerInput_PickUpRock = m_PlayerInput.FindAction("PickUpRock", throwIfNotFound: true);
        m_PlayerInput_Crawl = m_PlayerInput.FindAction("Crawl", throwIfNotFound: true);
        m_PlayerInput_Speed = m_PlayerInput.FindAction("Speed", throwIfNotFound: true);
        m_PlayerInput_UseItem1 = m_PlayerInput.FindAction("UseItem1", throwIfNotFound: true);
        m_PlayerInput_UseItem2 = m_PlayerInput.FindAction("UseItem2", throwIfNotFound: true);
        m_PlayerInput_ToggleInventory = m_PlayerInput.FindAction("ToggleInventory", throwIfNotFound: true);
        m_PlayerInput_TogglePauseMenu = m_PlayerInput.FindAction("TogglePauseMenu", throwIfNotFound: true);
        m_PlayerInput_UseItem = m_PlayerInput.FindAction("UseItem", throwIfNotFound: true);
        m_PlayerInput_DeselectItem = m_PlayerInput.FindAction("DeselectItem", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerInput
    private readonly InputActionMap m_PlayerInput;
    private List<IPlayerInputActions> m_PlayerInputActionsCallbackInterfaces = new List<IPlayerInputActions>();
    private readonly InputAction m_PlayerInput_Move;
    private readonly InputAction m_PlayerInput_Spin;
    private readonly InputAction m_PlayerInput_PickUpRock;
    private readonly InputAction m_PlayerInput_Crawl;
    private readonly InputAction m_PlayerInput_Speed;
    private readonly InputAction m_PlayerInput_UseItem1;
    private readonly InputAction m_PlayerInput_UseItem2;
    private readonly InputAction m_PlayerInput_ToggleInventory;
    private readonly InputAction m_PlayerInput_TogglePauseMenu;
    private readonly InputAction m_PlayerInput_UseItem;
    private readonly InputAction m_PlayerInput_DeselectItem;
    public struct PlayerInputActions
    {
        private @Input m_Wrapper;
        public PlayerInputActions(@Input wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerInput_Move;
        public InputAction @Spin => m_Wrapper.m_PlayerInput_Spin;
        public InputAction @PickUpRock => m_Wrapper.m_PlayerInput_PickUpRock;
        public InputAction @Crawl => m_Wrapper.m_PlayerInput_Crawl;
        public InputAction @Speed => m_Wrapper.m_PlayerInput_Speed;
        public InputAction @UseItem1 => m_Wrapper.m_PlayerInput_UseItem1;
        public InputAction @UseItem2 => m_Wrapper.m_PlayerInput_UseItem2;
        public InputAction @ToggleInventory => m_Wrapper.m_PlayerInput_ToggleInventory;
        public InputAction @TogglePauseMenu => m_Wrapper.m_PlayerInput_TogglePauseMenu;
        public InputAction @UseItem => m_Wrapper.m_PlayerInput_UseItem;
        public InputAction @DeselectItem => m_Wrapper.m_PlayerInput_DeselectItem;
        public InputActionMap Get() { return m_Wrapper.m_PlayerInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerInputActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerInputActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerInputActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Spin.started += instance.OnSpin;
            @Spin.performed += instance.OnSpin;
            @Spin.canceled += instance.OnSpin;
            @PickUpRock.started += instance.OnPickUpRock;
            @PickUpRock.performed += instance.OnPickUpRock;
            @PickUpRock.canceled += instance.OnPickUpRock;
            @Crawl.started += instance.OnCrawl;
            @Crawl.performed += instance.OnCrawl;
            @Crawl.canceled += instance.OnCrawl;
            @Speed.started += instance.OnSpeed;
            @Speed.performed += instance.OnSpeed;
            @Speed.canceled += instance.OnSpeed;
            @UseItem1.started += instance.OnUseItem1;
            @UseItem1.performed += instance.OnUseItem1;
            @UseItem1.canceled += instance.OnUseItem1;
            @UseItem2.started += instance.OnUseItem2;
            @UseItem2.performed += instance.OnUseItem2;
            @UseItem2.canceled += instance.OnUseItem2;
            @ToggleInventory.started += instance.OnToggleInventory;
            @ToggleInventory.performed += instance.OnToggleInventory;
            @ToggleInventory.canceled += instance.OnToggleInventory;
            @TogglePauseMenu.started += instance.OnTogglePauseMenu;
            @TogglePauseMenu.performed += instance.OnTogglePauseMenu;
            @TogglePauseMenu.canceled += instance.OnTogglePauseMenu;
            @UseItem.started += instance.OnUseItem;
            @UseItem.performed += instance.OnUseItem;
            @UseItem.canceled += instance.OnUseItem;
            @DeselectItem.started += instance.OnDeselectItem;
            @DeselectItem.performed += instance.OnDeselectItem;
            @DeselectItem.canceled += instance.OnDeselectItem;
        }

        private void UnregisterCallbacks(IPlayerInputActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Spin.started -= instance.OnSpin;
            @Spin.performed -= instance.OnSpin;
            @Spin.canceled -= instance.OnSpin;
            @PickUpRock.started -= instance.OnPickUpRock;
            @PickUpRock.performed -= instance.OnPickUpRock;
            @PickUpRock.canceled -= instance.OnPickUpRock;
            @Crawl.started -= instance.OnCrawl;
            @Crawl.performed -= instance.OnCrawl;
            @Crawl.canceled -= instance.OnCrawl;
            @Speed.started -= instance.OnSpeed;
            @Speed.performed -= instance.OnSpeed;
            @Speed.canceled -= instance.OnSpeed;
            @UseItem1.started -= instance.OnUseItem1;
            @UseItem1.performed -= instance.OnUseItem1;
            @UseItem1.canceled -= instance.OnUseItem1;
            @UseItem2.started -= instance.OnUseItem2;
            @UseItem2.performed -= instance.OnUseItem2;
            @UseItem2.canceled -= instance.OnUseItem2;
            @ToggleInventory.started -= instance.OnToggleInventory;
            @ToggleInventory.performed -= instance.OnToggleInventory;
            @ToggleInventory.canceled -= instance.OnToggleInventory;
            @TogglePauseMenu.started -= instance.OnTogglePauseMenu;
            @TogglePauseMenu.performed -= instance.OnTogglePauseMenu;
            @TogglePauseMenu.canceled -= instance.OnTogglePauseMenu;
            @UseItem.started -= instance.OnUseItem;
            @UseItem.performed -= instance.OnUseItem;
            @UseItem.canceled -= instance.OnUseItem;
            @DeselectItem.started -= instance.OnDeselectItem;
            @DeselectItem.performed -= instance.OnDeselectItem;
            @DeselectItem.canceled -= instance.OnDeselectItem;
        }

        public void RemoveCallbacks(IPlayerInputActions instance)
        {
            if (m_Wrapper.m_PlayerInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerInputActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerInputActions @PlayerInput => new PlayerInputActions(this);
    public interface IPlayerInputActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnSpin(InputAction.CallbackContext context);
        void OnPickUpRock(InputAction.CallbackContext context);
        void OnCrawl(InputAction.CallbackContext context);
        void OnSpeed(InputAction.CallbackContext context);
        void OnUseItem1(InputAction.CallbackContext context);
        void OnUseItem2(InputAction.CallbackContext context);
        void OnToggleInventory(InputAction.CallbackContext context);
        void OnTogglePauseMenu(InputAction.CallbackContext context);
        void OnUseItem(InputAction.CallbackContext context);
        void OnDeselectItem(InputAction.CallbackContext context);
    }
}
